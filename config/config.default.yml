# Make sure you only use either spaces are tabs when indenting this file or it
# will give you a big hassle when we attempt to load it.

# db
#
# Format: db: <type>://[username]:[password]@<host>/<database>
#
# type: mysql or mysqli is currently supported, sqlite, postgres and mssql are
#   experimental.
# username: The username to connect as, you do not need to specify if the type
#   does not require a username.
# password: Password, same as above.
# host: Hostname to connect to, use localhost if you do not have a database
#   server elsewhere.
# database: The name of the database in the database server that you wish to
#   connect to.
db: mysql://user:pass@host/mediabrary

# paths
#
# Holds a series of paths of different types allowing you to designate
# where different media files are stored.
paths:

  # paths/movie
  #
  # designates a series of paths where individual movie files are stored. If you
  # have movie files like c:\movies\Anaconda.avi, then this would be c:\movies.
  movie:
    - /path/to/movie

  movie-meta: meta/movie

  music:
    - /path/to/music

  music-meta: meta/music

  # paths/tv
  #
  # designates a series of paths where folders containing show episodes are
  # located. If you have /path/to/shows/House/House - S01E01 - Title.avi then
  # you would use /path/to/shows.
  tv:
    - /path/to/tv

  tv-meta: meta/tv

# glue
#
# support is experimental at best now that they have changed to another
# authentication system. This will specify a username and password for
# authentication. This was meant to be a system to suggest recommendations for
# a given show or movie.
glue:
  user: username
  pass: password

# player
#
# This is a system used to direct the client browser to a landing point based
# on where they came from and what they requested. For example, your public
# traffic can be directed to a public gateway and your private traffic could be
# directed to a local network share for faster access depending on what they ask
# for and where they come from.
player:

  # Translations
  #
  # Format
  # - client: <regular_expression>
  #   source: <source match>
  #   target: <target match>
  #
  # Enter a series of 3 lines per entry for a single translation. This will
  # first match a client location based on the 'client' line. Then if their
  # request starts with 'source', it will replace it with 'target'. eg.
  # - client: /192.168.*.*/
  #   source: c:/movies
  #   target: \\sambashare\c\movies
  # - client /.*/
  #   source: c:/movies
  #   target: http://www.mydomain.com/movies
  # Above will direct all traffic on 192.168.*.*, that attempts to access a file
  # located in c:/movies, over to your samba share. Otherwise, it'll land on the
  # next client match and translate files from c:/movies over to a webserver
  # where they may be accessible. Debugging this sytem is done largely in the
  # m3u files that that player generates when you attempt to play something.
  trans:
    - client: /192.168.1.*/
      source: /data/nas
      target: http://192.168.1.1:82/nas
    - client: /.*/
      source: /data/nas
      target: http://public.webserver:82/nas